{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["library","add","faTrash","App","React","useState","name","key","state","setState","items","setItems","className","id","onSubmit","e","preventDefault","Date","now","type","placeholder","value","onChange","target","map","item","onClick","filter","obj","deleteItem","icon","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAMAA,IAAQC,IAAIC,KAOZ,IAiDeC,EAjDO,WAAO,IAAD,EACEC,IAAMC,SAAe,CAACC,KAAM,GAAIC,IAAK,IADvC,mBACjBC,EADiB,KACVC,EADU,OAEEL,IAAMC,SAAiB,IAFzB,mBAEjBK,EAFiB,KAEVC,EAFU,KAexB,OACI,yBAAKC,UAAU,OACX,0BAAMC,GAAG,aAAaC,SAAU,SAAAC,GAC5BA,EAAEC,iBAEGR,EAAMF,MACXK,EAAS,GAAD,mBAAKD,GAAL,gBACDF,EADC,CAEJD,IAAKU,KAAKC,aAGd,2BAAOC,KAAK,OACLC,YAAY,aACZC,MAAOb,EAAMF,KACbgB,SAzBE,SAACP,GAClBN,EAAS,CACLH,KAAMS,EAAEQ,OAAOF,MACfd,IAAK,OAwBD,4BAAQY,KAAK,UAAb,QAIJ,yBAAKN,GAAG,cACJ,wBAAID,UAAU,aACTF,EAAMc,KAAI,SAACC,GAAD,OAAU,wBAAIb,UAAU,OAAOL,IAAKkB,EAAKlB,KAAK,2BAAIkB,EAAKnB,MAAS,0BACvEoB,QAAS,kBA3BV,SAACD,GAChBd,EAASD,EAAMiB,QAAO,SAAAC,GAAG,OAAIA,EAAIrB,MAAQkB,EAAKlB,QA0BfsB,CAAWJ,KAC1B,kBAAC,IAAD,CAAiBK,KAAK,mBCxC1BC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.daab332c.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faTrash);\n\ninterface Item {\n    name: string,\n    key: number,\n}\n\nconst App: React.FC = () => {\n    const [state, setState] = React.useState<Item>({name: '', key: 0});\n    const [items, setItems] = React.useState<Item[]>([]);\n\n    const onChangeTodo = (e: ChangeEvent<HTMLInputElement>) => {\n        setState({\n            name: e.target.value,\n            key: 0\n        })\n    };\n\n    const deleteItem = (item: Item) => {\n        setItems(items.filter(obj => obj.key !== item.key))\n    };\n\n    return (\n        <div className=\"App\">\n            <form id=\"to-do-form\" onSubmit={e => {\n                e.preventDefault();\n                // 빈 값 이벤트 끊기\n                if (!state.name) return;\n                setItems([...items, {\n                    ...state,\n                    key: Date.now()\n                }]);\n            }}>\n                <input type=\"text\"\n                       placeholder=\"Enter Text\"\n                       value={state.name}\n                       onChange={onChangeTodo}\n                />\n                <button type=\"submit\">\n                    Add\n                </button>\n            </form>\n            <div id=\"to-do-list\">\n                <ul className=\"item-list\">\n                    {items.map((item) => <li className=\"item\" key={item.key}><p>{item.name}</p><span\n                        onClick={() => deleteItem(item)}>\n                        <FontAwesomeIcon icon=\"trash\"/>\n                    </span>\n                    </li>)}\n                </ul>\n            </div>\n        </div>\n\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}